%% Digital Signal Processing - Federal Institute of São Paulo
% Author: Bruno Godoi Eilliar
% LPC Vocoder Assignment
% Notes
% -http://www.data-compression.com/speech.html

clear all
close all
clc
%% Loab/Build Signal
filename = 'meu_mono_A.wav';
[x, Fs] = audioread(filename);
% Get Sample Period
% for fs = 44100 samples/s -> Ts = 1/44100 s
Ts = 1/Fs;
% UI information
disp('Audio sucessfully loaded.');

figure();
plot(x); grid on;
title('Mono "A" Vowel Sound');
sound(x, Fs);
disp('Press ENTER key to continue...');
pause;

%% LPC
disp('Proceeding to LPC Vocoder Algorithm');
% A is the coefficients of the LPC filter H(z)
A = lpc(x, 5);

% Build H(z)
DEN = A;
NUM = 1;
H_z = tf(NUM, DEN, Ts);
% Build the inverse of H(z)
H_inv = tf(DEN, NUM, Ts);

% Check frequency response of the digital filter H(z)
[H, W] = freqz([1],DEN);
figure()
W_norm = W*Fs/(2*pi);
plot(W_norm,abs(H)); grid on;
title('H(z) - Frequency response');
% Peak at 947.5 Hz

% Check frequency response of the digital filter H_inv(z)
[H_i, W_i] = freqz(DEN, [1]);
W_norm = W_i*Fs/(2*pi);
figure()
plot(W_norm,abs(H_i)); grid on;
title('H_inv(z) - Frequency response');

%% Vocoder
% pulse_train = filter(1,DEN,  x(1:end));
% figure()
% plot(pulse_train);

% Time Vector
% t = 0:Ts: length(x(5000:10000)-1);
% pulse_train = lsim(H_inv, x(5000:10000-1), t);

%% 
impulses = zeros(size(x(1:10000)),1);
for k = 947: 947: length(impulses)
    impulses(k) = 1;
end

%X_sim = filter([1 DEN], NUM,impulses);
t = 0:1/947: length(impulses)-1;
pulse_train = lsim(H_inv, impulse, t);
figure()
subplot(2,1,1)
plot(impulses)
subplot(2,1,2)
plot(X_sim)